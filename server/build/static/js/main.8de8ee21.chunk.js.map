{"version":3,"sources":["Components/GameInfo/GameInfo.js","Components/RoomInfo/RoomInfo.js","Components/Card/Card.js","Components/MainView/MainView.js","Components/RegistrationView/RegistrationView.js","socket.js","Components/App/App.js","index.js"],"names":["GameInfo","clues","this","props","map","clue","index","className","team","content","number","phase","length","turn","guessesLeft","score","React","Component","RoomInfo","styleUser","user","role","username","id","handleClick","event","joinTeam","target","dataset","blue","userList","filter","red","spectator","data-team","data-role","onClick","Card","color","selected","turned","word","MainView","onItemSelected","cards","state","setState","handleSubmitGuess","submitGuess","alert","handleSubmitClue","submitClue","parseInt","handleBotClue","botClue","handleKeyPress","key","handleChange","value","handleNumberChange","card","i","text","myTurnToGuess","e","disabled","myTurnToClue","onKeyPress","onChange","type","placeholder","min","max","RegistrationView","handleSubmit","registerUser","socket","io","autoConnect","onAny","args","console","log","on","err","message","App","usernameSelected","auth","connect","emit","newClue","guesser","toggleView","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8de8ee21.chunk.js","sourcesContent":["import React from 'react';\nimport './GameInfo.css';\n\nclass GameInfo extends React.Component {\n    render() {\n        const clues = this.props.clues.map((clue, index) => { \n            return <div className={\"clue-\" + clue.team} key={index}>{clue.content} ({clue.number})</div> \n        });\n\n        return <div className=\"game-info\">\n            \n            <div className=\"earlier-clues\">\n            <h2>Earlier Clues:</h2>\n            <ul>\n                {clues}\n            </ul>\n            </div>\n\n            <div className=\"new-clue\">\n            <h2>New Clue:</h2> \n            {this.props.phase === \"guess\" ? clues[clues.length-1] : \"waiting for spymaster...\"}\n            </div>\n\n\n            <div className=\"game-phase\">\n            <h2>It is {this.props.turn}'s turn to {this.props.phase}.</h2>\n            {this.props.phase === \"guess\" ? `Guesses left: ${this.props.guessesLeft}` : \"\"}\n            </div>\n\n\n            <div className=\"scores\">\n            <h3>Scores:</h3>\n            <p>Red: {this.props.score[\"red\"]}</p>\n            <p>Blue: {this.props.score[\"blue\"]}</p>\n            </div>\n\n            </div>   \n    }\n}\n\nexport default GameInfo;","import React from 'react';\nimport './RoomInfo.css';\n\nclass RoomInfo extends React.Component {\n\n    styleUser = (user) => {\n        return (\n            <span className={user.role + \"-user\"} key={user.id}>{user.username} </span>\n        );\n    }\n\n    render() {\n        const blue = this.props.userList.filter((user) => user.team === \"blue\").map(this.styleUser);\n        const red = this.props.userList.filter((user) => user.team === \"red\").map(this.styleUser);\n        const spectator = this.props.userList.filter((user) => user.team === \"spectator\").map(this.styleUser);\n        return <div className=\"room-info\">\n            \n                <div className=\"team blue-team\">\n                    <h2>Team Blue</h2>\n                    {blue}\n                    <button data-team=\"blue\" data-role=\"guesser\" onClick={this.handleClick}>Join as Guesser</button>\n                    <button data-team=\"blue\" data-role=\"master\" onClick={this.handleClick}>Join as Master</button>\n                </div>\n\n                <div className=\"team red-team\">\n                    <h2>Team Red</h2>\n                    {red}\n                    <button data-team=\"red\" data-role=\"guesser\" onClick={this.handleClick}>Join as Guesser</button>\n                    <button data-team=\"red\" data-role=\"master\" onClick={this.handleClick}>Join as Master</button>\n                </div>\n\n                <div className=\"team spectators\">\n                    <h2>Spectators</h2>\n                    {spectator}\n                    <button data-team=\"spectator\" data-role=\"spectator\" onClick={this.handleClick}>Join</button>\n                </div>\n            \n                </div>\n            \n    }\n\n    handleClick = (event) => {\n        this.props.joinTeam(event.target.dataset.team, event.target.dataset.role);\n    }\n}\n\nexport default RoomInfo;","import React from 'react';\nimport './Card.css';\n\nclass Card extends React.Component {\n    render() {\n        return <div className=\"code-card\">\n                    <p onClick={this.props.handleClick} \n                       className={\"code-text \" + this.props.color + \"-col\" + (this.props.selected ? \"-sel\" : \"\") + (this.props.turned ? \"-turned\" : \"\")}>\n                        {this.props.word}\n                    </p>\n                </div>\n    }\n}\n\nexport default Card;","import React from 'react';\nimport './MainView.css';\n\nimport GameInfo from '../GameInfo/GameInfo.js';\nimport RoomInfo from '../RoomInfo/RoomInfo.js';\nimport Card from '../Card/Card.js'\n\nclass MainView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: -1,\n            clue: \"\",\n            number: 1,\n        }\n    }\n\n\n    render() { \n        return (\n            <div className={\"view \" + this.props.turn + \"-turn\"}>\n            <div className=\"left-panel\">\n            <div className=\"game-board\">\n                {this.props.cards.map((card, i) => {\n                    return <Card \n                        color={card.color}\n                        word={card.text}\n                        key={i}\n                        selected={this.state.selected === i}\n                        handleClick={this.props.myTurnToGuess && !(card.turned) ? (e) => this.onItemSelected(i) : null}\n                        turned={card.turned}\n                    />})}\n                \n            </div>\n            <div className=\"controls\">\n                {this.props.myTurnToGuess && \n                        <button onClick={this.handleSubmitGuess} disabled={this.props.phase === \"clue\"}>Submit guess</button>\n                }\n                {this.props.myTurnToClue && \n                        <input className=\"clue-input\"\n                                onKeyPress={this.handleKeyPress} \n                                onChange={this.handleChange} \n                                key=\"clue\" \n                                value={this.state.clue} \n                                type=\"text\"\n                                disabled={this.props.phase === \"guess\"}\n                                placeholder=\"Enter a clue\"\n                        />\n                }\n                {this.props.myTurnToClue &&\n                        <input type=\"number\"\n                               onChange={this.handleNumberChange}\n                               key=\"number\"\n                               value={this.state.number}\n                               placeholder=\"1\"\n                               min=\"1\"\n                               max=\"10\"\n                        />}\n                {this.props.myTurnToClue && \n                <button onClick={this.handleSubmitClue} disabled={this.props.phase===\"guess\"}>Submit clue</button> \n                }\n                {this.props.myTurnToClue && \n                <button onClick={this.handleBotClue} disabled={this.props.phase===\"guess\"}>Bot clue</button> \n                }\n            </div>\n            </div>\n                \n            \n\n            <RoomInfo\n                userList={this.props.userList}\n                joinTeam={this.props.joinTeam}                \n            />\n\n            <GameInfo\n                turn={this.props.turn}\n                clues={this.props.clues}\n                score={this.props.score}\n                phase={this.props.phase}\n                guessesLeft={this.props.guessesLeft}\n                    />\n            </div> \n        );\n    }\n\n    onItemSelected = (index) => {\n        if (this.props.cards[index].turned) { return; }\n        if (this.state.selected === index) {\n            this.setState( {\n                selected : -1 \n            });\n        } else {\n            this.setState( {\n                selected: index\n            } )\n        }\n    }\n    \n    handleSubmitGuess = () => {\n        if (this.state.selected !== -1) {\n            this.props.submitGuess(this.state.selected);\n        } else {\n            alert('no card selected');\n        }\n        this.setState( { selected: -1 });\n    }\n\n\n    handleSubmitClue = (event) => {\n        this.props.submitClue(this.state.clue, parseInt(this.state.number));\n        this.setState( {\n            clue: \"\",\n            number: 1\n        })\n    } \n\n    handleBotClue = (event) => {\n        this.props.botClue(this.state.number);\n        this.setState( {\n            clue: \"\",\n            number: 1\n        })\n    }\n\n    handleKeyPress = (event) => {\n        if (event.key === \"Enter\") {\n            this.handleSubmitClue();\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState( {\n            clue: event.target.value\n        })\n    }\n\n    handleNumberChange = (event) => {\n        this.setState( {\n            number: event.target.value\n        })\n    }\n\n\n}\n\nexport default MainView;","import React from 'react';\nimport './RegistrationView.css';\n\nclass RegistrationView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: \"\"\n        }\n    }\n\n    render() {\n        return <div>\n        <input className=\"username-input\"\n            onKeyPress={this.handleKeyPress} \n            onChange={this.handleChange} \n            key=\"username\" \n            value={this.state.username} \n            type=\"text\"\n        >\n        </input>\n        <button onClick={this.handleSubmit}>Submit</button>\n        </div>\n    }\n\n\n    handleKeyPress = (event) => {\n        if (event.key === \"Enter\") {\n            this.handleSubmit();\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState( {\n            username: event.target.value\n        })\n    }\n\n    handleSubmit = (event) => {\n        this.props.registerUser(this.state.username);\n    }\n\n}\nexport default RegistrationView;","import { io } from \"socket.io-client\"\n\nconst URL = \"http://localhost:9000\";\nconst socket = io(URL, { autoConnect: false });\n\nsocket.onAny((event, ...args) => {\n    console.log(event, args);\n})\n\nsocket.on(\"connect_error\", (err) => {\n    if (err.message === \"username too short\") {\n      alert(\"bad username\");\n    }\n  });\n\n\n\nexport default socket;","import React from 'react';\nimport './App.css';\n\nimport MainView from '../MainView/MainView.js';\nimport RegistrationView from '../RegistrationView/RegistrationView.js';\nimport socket from '../../socket.js';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // this.initWords();            \n        this.state = {\n            usernameSelected: false,\n            username: \"\",\n            team: \"spectator\",\n            role: \"spectator\",\n            userList: [],\n            guesser: false,\n            clues: [],\n            turn: \"red\",\n            phase: \"clue\",\n            score : {\"red\" : 0, \"blue\": 0},\n            cards: [],\n            guessesLeft: 0\n        };\n\n        socket.on(\"userlist\", (userList) => this.setState({\n            userList\n        }));\n\n        socket.on(\"cardlist\", (cards) => this.setState({\n            cards\n        }));\n\n        socket.on(\"scores\", (score) => this.setState({ score }));\n\n        socket.on(\"clue change\", (clues) => this.setState({\n            clues\n        }))\n\n        socket.on(\"phase change\", (turn, phase, guessesLeft) => this.setState({\n            turn,\n            phase,\n            guessesLeft\n        }))\n    }\n\n    render() {\n        if (!this.state.usernameSelected) {\n            return (\n                <RegistrationView\n                    registerUser = {this.registerUser}\n                />\n            )\n\n        } else {\n            // if (this.state.role !== \"master\") {\n            // if (this.guesser) {\n                return (\n                    <MainView \n                        cards={this.state.cards}\n                        toggleView={this.toggleView}\n                        guessesLeft={this.state.guessesLeft}\n                        submitGuess={this.submitGuess}\n                        submitClue={this.submitClue}\n                        botClue={this.botClue}\n                        myTurnToGuess={this.state.phase === \"guess\" && this.state.team === this.state.turn && this.state.role === \"guesser\"}\n                        myTurnToClue={this.state.phase === \"clue\" && this.state.team === this.state.turn && this.state.role === \"master\"}\n                        clues={this.state.clues}\n                        turn={this.state.turn}\n                        team={this.state.team}\n                        role={this.state.role}\n                        phase={this.state.phase}\n                        score={this.state.score}\n                        userList={this.state.userList}\n                        joinTeam={this.joinTeam}\n                        />\n                );\n        }\n    }\n\n    registerUser = (username) => {\n        this.setState( {\n            usernameSelected: true\n        });\n        socket.auth = { username };\n        socket.connect();\n    }\n\n    joinTeam = (team, role) => {\n        // console.log(\"calling jointeam with value \" + team);\n        this.setState( {\n            team,\n            role\n        });\n        socket.emit(\"join team\", team, role);\n        // console.log(this.state.userList);\n    }\n\n    submitGuess = (i) => {\n        socket.emit(\"new guess\", i);\n        /* this.setState((state) => ({\n            turn: (state.turn === \"red\") ? \"blue\" : \"red\",\n            phase: \"clue\"\n            // guesserCards: [...state.guesserCards, state.guesserCards[i].turned = true]\n        })) */\n    }\n\n\n    submitClue = (clue, number) => {\n        if (clue === \"\") { alert(\"no clue entered\"); return; }\n\n        const newClue = {\n            content: clue, \n            number: number,\n            team: this.state.turn\n        };\n\n        socket.emit(\"new clue\", newClue);\n    }\n\n    botClue = (number) => {\n        socket.emit(\"bot clue\", number);\n    }\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nimport App from './Components/App/App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}